{"cells":[{"cell_type":"code","source":["# Etapa 1: Instalar e configurar o AMPL Community Edition com o solver HiGHS\n","!pip install -q amplpy\n","from amplpy import AMPL, ampl_notebook\n","\n","# Inicializa o ambiente do AMPL com a licença gratuita e o módulo HiGHS\n","ampl_notebook(modules=[\"highs\"], license_uuid=\"default\")\n","\n","# Etapa 2: Cria uma instância do AMPL\n","ampl = AMPL()\n","\n","# Etapa 3: Define o modelo\n","modelo = \"\"\"\n","\n","param n;\n","param C1;\n","param C2;\n","param C3;\n","param E;\n","param D1;\n","param D2;\n","param D3;\n","param D4;\n","param L1;\n","param L2;\n","\n","var x {j in 1..n} integer >= 0;\n","var y {j in 1..n} integer >= 0;\n","var z {j in 1..n} integer >= 0;\n","\n","minimize fobj: sum {j in 1..n} C1*x[j]+sum {j in 1..n} C2*y[j]+sum {j in 1..n} C3*z[j];\n","\n","subject to constraint1: E + x[1] + z[1] - y[1] = D1;\n","subject to constraint2: x[2] + z[2] + y[1] - y[2] = D2;\n","subject to constraint3: x[3] + z[3] + y[2] - y[3] = D3;\n","subject to constraint4: x[4] + z[4] + y[3] - y[4] = D4;\n","subject to constraint5 {j in 1..n}: x[j] <= L1;\n","subject to constraint6 {j in 1..n}: z[j] <= L2;\n","\"\"\"\n","\n","ampl.eval(modelo)\n","\n","#Etapa 4: Cria o arquivo de dados\n","# A matriz A possui 7 linhas (itens) e 10 colunas (padrões)\n","with open(\"dados.dat\", \"w\") as f:\n","    f.write(\"\"\"\n","param n := 4;\n","param C1 := 1200;\n","param C2 := 100;\n","param C3 := 1500;\n","param E := 5000;\n","param D1 := 7000;\n","param D2 := 15000;\n","param D3 := 10000;\n","param D4 := 8000;\n","param L1 := 10000;\n","param L2 := 2500;\n","\"\"\")\n","\n","#Etapa 5: Carrega os dados do arquivo\n","ampl.read_data(\"dados.dat\")\n","\n","# Etapa 6: Define o solver gratuito HiGHS\n","ampl.set_option('solver', 'highs')\n","\n","# Etapa 7: Resolve o modelo\n","ampl.solve()\n","\n","# Etapa 8: Exibe os resultados\n","# Converte os valores da variável x para um DataFrame do pandas para iteração\n","df1 = ampl.get_variable('x').get_values().to_pandas()\n","df2 = ampl.get_variable('y').get_values().to_pandas()\n","df3 = ampl.get_variable('z').get_values().to_pandas()\n","\n","print(\"Solução encontrada:\")\n","for idx, row in df1.iterrows():\n","    print(f\"x[{idx}] = {row[0]}\")\n","\n","for idx, row in df2.iterrows():\n","    print(f\"y[{idx}] = {row[0]}\")\n","\n","for idx, row in df3.iterrows():\n","    print(f\"z[{idx}] = {row[0]}\")\n","\n","\n","\n","print(\"\\nValor da função objetivo:\")\n","print(ampl.get_objective('fobj').value())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yiLjwOo6PHq3","executionInfo":{"status":"ok","timestamp":1744315421125,"user_tz":180,"elapsed":7059,"user":{"displayName":"","userId":""}},"outputId":"292f4627-3468-46eb-ecd0-432122e52797"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Using default Community Edition License for Colab. Get yours at: https://ampl.com/ce\n","Licensed to AMPL Community Edition License for the AMPL Model Colaboratory (https://ampl.com/colab).\n","HiGHS 1.10.0: \b\b\b\b\b\b\b\b\b\b\b\b\b\bHiGHS 1.10.0: optimal solution; objective 42500000\n","3 simplex iterations\n","1 branching nodes\n","Solução encontrada:\n","x[1] = 7000\n","x[2] = 10000\n","x[3] = 10000\n","x[4] = 8000\n","y[1] = 5000\n","y[2] = 0\n","y[3] = 0\n","y[4] = 0\n","z[1] = 0\n","z[2] = 0\n","z[3] = 0\n","z[4] = 0\n","\n","Valor da função objetivo:\n","42500000.0\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-30-9fe1dd1f73a8>:76: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  print(f\"x[{idx}] = {row[0]}\")\n","<ipython-input-30-9fe1dd1f73a8>:79: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  print(f\"y[{idx}] = {row[0]}\")\n","<ipython-input-30-9fe1dd1f73a8>:82: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  print(f\"z[{idx}] = {row[0]}\")\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1744316033301}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}